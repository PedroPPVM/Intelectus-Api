from typing import List, Optional, Dict, Any
from uuid import UUID
from datetime import datetime
from fastapi import HTTPException, status
from sqlalchemy.orm import Session

from app.models.alert import Alert, AlertType
from app.models.user import User
from app.models.process import Process
from app.schemas.alert import AlertCreate, AlertUpdate, AlertResponse
from app.crud import alert as crud_alert
from app.services.access_control_service import access_control_service


class AlertService:
    """
    Service para centralizar todas as regras de neg√≥cio de alertas.
    
    üéØ Objetivo: Padronizar sistema de notifica√ß√µes, centralizar l√≥gicas
    de matching e preparar base para scraping autom√°tico.
    
    Roadmap Fase 3.2 - Etapa 4 (M√©dia Prioridade)
    """
    
    def create_alert_with_validation(
        self,
        db: Session,
        alert_data: AlertCreate,
        user: User
    ) -> Alert:
        """
        Criar alerta com valida√ß√µes completas.
        
        Usado principalmente pelo sistema de scraping para notificar usu√°rios.
        
        Args:
            db: Sess√£o do banco
            alert_data: Dados do alerta
            user: Usu√°rio criando (geralmente superusu√°rio/sistema)
            
        Returns:
            Alert: Alerta criado
            
        Raises:
            HTTPException: Se valida√ß√µes falharem
        """
        # Apenas superusu√°rios criam alertas (sistema de scraping)
        access_control_service.validate_superuser(user)
        
        # Validar regras de neg√≥cio
        self.validate_alert_business_rules(alert_data)
        
        # Verificar se processo existe (se fornecido)
        if alert_data.process_id:
            # Usar access_control_service para valida√ß√£o centralizada
            # Como √© sistema, passamos o superusu√°rio que j√° foi validado
            access_control_service.validate_process_access(
                db, user, alert_data.process_id, "read_processes"
            )
        
        # Criar alerta
        alert = crud_alert.create(db, obj_in=alert_data)
        
        return alert
    
    def get_user_alerts_with_filters(
        self,
        db: Session,
        user: User,
        filters: Dict[str, Any]
    ) -> List[Alert]:
        """
        Obter alertas do usu√°rio com filtros.
        
        Centraliza l√≥gica de acesso e filtros dos endpoints.
        
        Args:
            db: Sess√£o do banco
            user: Usu√°rio fazendo a consulta
            filters: Dicion√°rio com filtros (unread_only, alert_type, skip, limit)
            
        Returns:
            List[Alert]: Alertas filtrados
        """
        # Extrair par√¢metros
        skip = filters.get('skip', 0)
        limit = filters.get('limit', 100)
        unread_only = filters.get('unread_only', False)
        alert_type = filters.get('alert_type')
        
        if user.is_superuser:
            # Superusu√°rio pode ver todos os alertas
            if alert_type:
                return crud_alert.get_by_type(db, alert_type=alert_type, skip=skip, limit=limit)
            else:
                return crud_alert.get_multi(db, skip=skip, limit=limit)
        else:
            # Usu√°rio normal s√≥ v√™ seus alertas
            if unread_only:
                alerts = crud_alert.get_unread_by_user(db, user_id=user.id, skip=skip, limit=limit)
            else:
                alerts = crud_alert.get_by_user(db, user_id=user.id, skip=skip, limit=limit)
            
            # Aplicar filtro por tipo se fornecido
            if alert_type:
                alerts = [a for a in alerts if a.alert_type.value == alert_type]
            
            return alerts
    
    def mark_alert_as_read_with_audit(
        self,
        db: Session,
        alert_id: UUID,
        user: User
    ) -> Alert:
        """
        Marcar alerta como lido com auditoria.
        
        Centraliza l√≥gica que est√° duplicada nos endpoints.
        
        Args:
            db: Sess√£o do banco
            alert_id: ID do alerta
            user: Usu√°rio marcando como lido
            
        Returns:
            Alert: Alerta atualizado
            
        Raises:
            HTTPException: Se n√£o encontrado ou sem permiss√£o
        """
        # Validar acesso ao alerta
        alert = access_control_service.validate_alert_access(db, user, alert_id)
        
        # Marcar como lido
        updated_alert = crud_alert.mark_as_read(db, id=alert_id)
        
        if not updated_alert:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erro ao marcar alerta como lido"
            )
        
        return updated_alert
    
    def mark_alert_as_dismissed_with_audit(
        self,
        db: Session,
        alert_id: UUID,
        user: User
    ) -> Alert:
        """
        Marcar alerta como descartado com auditoria.
        
        Centraliza l√≥gica duplicada nos endpoints.
        
        Args:
            db: Sess√£o do banco
            alert_id: ID do alerta
            user: Usu√°rio descartando o alerta
            
        Returns:
            Alert: Alerta atualizado
        """
        # Validar acesso ao alerta
        alert = access_control_service.validate_alert_access(db, user, alert_id)
        
        # Marcar como descartado
        updated_alert = crud_alert.mark_as_dismissed(db, id=alert_id)
        
        if not updated_alert:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erro ao descartar alerta"
            )
        
        return updated_alert
    
    def get_process_related_alerts(
        self,
        db: Session,
        process_id: UUID,
        user: User,
        skip: int = 0,
        limit: int = 100
    ) -> List[Alert]:
        """
        Obter alertas relacionados a um processo espec√≠fico.
        
        Centraliza l√≥gica de acesso e filtragem por processo.
        
        Args:
            db: Sess√£o do banco
            process_id: ID do processo
            user: Usu√°rio fazendo a consulta
            skip: Registros para pular
            limit: M√°ximo de registros
            
        Returns:
            List[Alert]: Alertas do processo
        """
        # Validar acesso ao processo
        process = access_control_service.validate_process_access(
            db, user, process_id, "read_processes"
        )
        
        # Buscar alertas do processo
        alerts = crud_alert.get_by_process(db, process_id=process_id, skip=skip, limit=limit)
        
        # Filtrar apenas alertas do usu√°rio atual (exceto superusu√°rios)
        if not user.is_superuser:
            alerts = [alert for alert in alerts if alert.user_id == user.id]
        
        return alerts
    
    def create_process_match_alert(
        self,
        db: Session,
        process_id: UUID,
        user_id: UUID,
        match_details: Dict[str, Any],
        alert_type: AlertType = AlertType.SIMILAR_PROCESS
    ) -> Alert:
        """
        Criar alerta de matching de processo.
        
        Usado pelo sistema de scraping para notificar sobre matches.
        
        Args:
            db: Sess√£o do banco
            process_id: ID do processo relacionado
            user_id: ID do usu√°rio a ser notificado
            match_details: Detalhes do match encontrado
            alert_type: Tipo do alerta
            
        Returns:
            Alert: Alerta criado
        """
        # Criar dados do alerta
        title = f"Processo similar encontrado: {match_details.get('process_number', 'N/A')}"
        
        message_parts = [
            f"Foi encontrado um processo similar ao seu:",
            f"‚Ä¢ N√∫mero: {match_details.get('process_number', 'N/A')}",
            f"‚Ä¢ T√≠tulo: {match_details.get('title', 'N/A')}",
            f"‚Ä¢ Tipo: {match_details.get('process_type', 'N/A')}",
            f"‚Ä¢ Depositante: {match_details.get('depositor', 'N/A')}",
            f"‚Ä¢ Status: {match_details.get('status', 'N/A')}",
        ]
        
        if 'similarity_score' in match_details:
            message_parts.append(f"‚Ä¢ Similaridade: {match_details['similarity_score']:.1%}")
        
        alert_data = AlertCreate(
            title=title,
            message="\n".join(message_parts),
            alert_type=alert_type,
            user_id=user_id,
            process_id=process_id
        )
        
        # Criar alerta diretamente (sistema interno)
        alert = crud_alert.create(db, obj_in=alert_data)
        
        return alert
    
    def bulk_mark_alerts_read(
        self,
        db: Session,
        user: User,
        alert_ids: List[UUID]
    ) -> int:
        """
        Marcar m√∫ltiplos alertas como lidos em lote.
        
        Otimiza opera√ß√µes em massa.
        
        Args:
            db: Sess√£o do banco
            user: Usu√°rio executando a opera√ß√£o
            alert_ids: Lista de IDs dos alertas
            
        Returns:
            int: N√∫mero de alertas marcados como lidos
        """
        marked_count = 0
        
        for alert_id in alert_ids:
            try:
                # Validar acesso a cada alerta
                access_control_service.validate_alert_access(db, user, alert_id)
                
                # Marcar como lido
                updated_alert = crud_alert.mark_as_read(db, id=alert_id)
                if updated_alert:
                    marked_count += 1
                    
            except HTTPException:
                # Ignorar alertas sem acesso (n√£o parar o processo)
                continue
        
        return marked_count
    
    def get_alert_statistics(
        self,
        db: Session,
        user_id: UUID,
        user: User
    ) -> Dict[str, Any]:
        """
        Obter estat√≠sticas de alertas do usu√°rio.
        
        Centraliza l√≥gica de dashboard de alertas.
        
        Args:
            db: Sess√£o do banco
            user_id: ID do usu√°rio (pode ser diferente de user se superusu√°rio)
            user: Usu√°rio fazendo a consulta
            
        Returns:
            Dict[str, Any]: Estat√≠sticas de alertas
        """
        # Verificar se pode consultar alertas de outro usu√°rio
        if not user.is_superuser and user.id != user_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acesso negado: voc√™ s√≥ pode ver suas pr√≥prias estat√≠sticas"
            )
        
        # Contar alertas n√£o lidos
        unread_count = crud_alert.count_unread_by_user(db, user_id=user_id)
        
        # Obter todos os alertas do usu√°rio para estat√≠sticas
        all_alerts = crud_alert.get_by_user(db, user_id=user_id, skip=0, limit=1000)
        
        # Estat√≠sticas por tipo
        type_stats = {}
        for alert_type in AlertType:
            count = len([a for a in all_alerts if a.alert_type == alert_type])
            type_stats[alert_type.value] = count
        
        # Estat√≠sticas por status
        read_count = len([a for a in all_alerts if a.is_read])
        dismissed_count = len([a for a in all_alerts if a.is_dismissed])
        
        return {
            "user_id": str(user_id),
            "total_alerts": len(all_alerts),
            "unread_count": unread_count,
            "read_count": read_count,
            "dismissed_count": dismissed_count,
            "by_type": type_stats,
            "requested_by_user_id": str(user.id),
            "is_superuser_request": user.is_superuser,
            "generated_at": datetime.utcnow().isoformat()
        }
    
    def update_alert_with_validation(
        self,
        db: Session,
        alert_id: UUID,
        update_data: AlertUpdate,
        user: User
    ) -> Alert:
        """
        Atualizar alerta com valida√ß√µes.
        
        Centraliza l√≥gica de atualiza√ß√£o de alertas.
        
        Args:
            db: Sess√£o do banco
            alert_id: ID do alerta
            update_data: Dados para atualiza√ß√£o
            user: Usu√°rio executando a opera√ß√£o
            
        Returns:
            Alert: Alerta atualizado
        """
        # Validar acesso ao alerta
        alert = access_control_service.validate_alert_access(db, user, alert_id)
        
        # Atualizar alerta
        updated_alert = crud_alert.update(db, db_obj=alert, obj_in=update_data)
        
        return updated_alert
    
    def delete_alert_with_validation(
        self,
        db: Session,
        alert_id: UUID,
        user: User
    ) -> None:
        """
        Deletar alerta com valida√ß√µes.
        
        Centraliza l√≥gica de exclus√£o de alertas.
        
        Args:
            db: Sess√£o do banco
            alert_id: ID do alerta
            user: Usu√°rio executando a opera√ß√£o
        """
        # Validar acesso ao alerta
        alert = access_control_service.validate_alert_access(db, user, alert_id)
        
        # Deletar alerta
        crud_alert.delete(db, id=alert_id)
    
    def validate_alert_business_rules(
        self,
        alert_data: AlertCreate | AlertUpdate
    ) -> None:
        """
        Validar regras de neg√≥cio espec√≠ficas de alertas.
        
        Centraliza valida√ß√µes de alertas.
        
        Args:
            alert_data: Dados do alerta para validar
            
        Raises:
            HTTPException: Se alguma regra for violada
        """
        # Valida√ß√£o de t√≠tulo
        if hasattr(alert_data, 'title') and alert_data.title:
            title = alert_data.title.strip()
            
            if len(title) < 5:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="T√≠tulo do alerta deve ter pelo menos 5 caracteres"
                )
            
            if len(title) > 500:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="T√≠tulo do alerta deve ter no m√°ximo 500 caracteres"
                )
        
        # Valida√ß√£o de mensagem
        if hasattr(alert_data, 'message') and alert_data.message:
            message = alert_data.message.strip()
            
            if len(message) < 10:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Mensagem do alerta deve ter pelo menos 10 caracteres"
                )
            
            if len(message) > 2000:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Mensagem do alerta deve ter no m√°ximo 2000 caracteres"
                )
    
    def get_alert_with_access_validation(
        self,
        db: Session,
        alert_id: UUID,
        user: User
    ) -> Alert:
        """
        Obter alerta com valida√ß√£o de acesso.
        
        Wrapper conveniente que combina busca + valida√ß√£o.
        
        Args:
            db: Sess√£o do banco
            alert_id: ID do alerta
            user: Usu√°rio fazendo a consulta
            
        Returns:
            Alert: Alerta se acesso v√°lido
        """
        return access_control_service.validate_alert_access(db, user, alert_id)
    
    def mark_all_user_alerts_as_read(
        self,
        db: Session,
        user: User
    ) -> int:
        """
        Marcar todos os alertas de um usu√°rio como lidos.
        
        Funcionalidade √∫til para "limpar" notifica√ß√µes.
        
        Args:
            db: Sess√£o do banco
            user: Usu√°rio executando a opera√ß√£o
            
        Returns:
            int: N√∫mero de alertas marcados como lidos
        """
        # Marcar todos como lidos
        count = crud_alert.mark_all_as_read_by_user(db, user_id=user.id)
        
        return count


# Inst√¢ncia global para uso nos endpoints
alert_service = AlertService() 