from typing import List, Optional, Dict, Any, Tuple
from uuid import UUID
from fastapi import HTTPException, status
from sqlalchemy.orm import Session

from app.models.company import Company
from app.models.user import User
from app.schemas.company import CompanyCreate, CompanyUpdate, CompanyResponse
from app.crud import company as crud_company
from app.services.access_control_service import access_control_service


class CompanyService:
    """
    Service para centralizar todas as regras de neg√≥cio de empresas.
    
    üéØ Objetivo: Eliminar transforma√ß√µes duplicadas, centralizar valida√ß√µes
    de CNPJ/CPF e padronizar relacionamentos User ‚Üî Company.
    
    Roadmap Fase 3.2 - Etapa 3 (Alta Prioridade)
    """
    
    def create_company_with_validation(
        self,
        db: Session,
        company_data: CompanyCreate,
        user: User
    ) -> Company:
        """
        Criar empresa com todas as valida√ß√µes de neg√≥cio.
        
        Centraliza l√≥gica duplicada nos endpoints de cria√ß√£o.
        
        Args:
            db: Sess√£o do banco
            company_data: Dados da empresa
            user: Usu√°rio executando a opera√ß√£o
            
        Returns:
            Company: Empresa criada
            
        Raises:
            HTTPException: Se valida√ß√µes falharem
        """
        # Validar regras de neg√≥cio
        self.validate_company_business_rules(company_data)
        
        # Validar documento √∫nico
        if not self.validate_unique_document(db, company_data.document):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Este documento (CNPJ/CPF) j√° est√° cadastrado"
            )
        
        # Criar empresa
        company = crud_company.create(db, obj_in=company_data)
        
        return company
    
    def validate_unique_document(
        self,
        db: Session,
        document: str,
        exclude_id: Optional[UUID] = None
    ) -> bool:
        """
        Validar se documento (CNPJ/CPF) √© √∫nico no sistema.
        
        Centraliza valida√ß√£o duplicada em endpoints de cria√ß√£o/atualiza√ß√£o.
        
        Args:
            db: Sess√£o do banco
            document: CNPJ ou CPF
            exclude_id: ID da empresa a excluir (para updates)
            
        Returns:
            bool: True se documento √© √∫nico, False se j√° existe
        """
        existing_company = crud_company.get_by_document(db, document=document)
        
        # Se n√£o encontrou, est√° dispon√≠vel
        if not existing_company:
            return True
        
        # Se encontrou mas √© a mesma empresa (update), est√° ok
        if exclude_id and existing_company.id == exclude_id:
            return True
        
        # Documento j√° em uso por outra empresa
        return False
    
    def transform_to_company_response(
        self, 
        company: Company
    ) -> CompanyResponse:
        """
        Transformar Company em CompanyResponse.
        
        Elimina transforma√ß√£o duplicada em +5 endpoints.
        Centraliza l√≥gica de user_ids.
        
        Args:
            company: Empresa do banco
            
        Returns:
            CompanyResponse: Resposta formatada
        """
        company_data = CompanyResponse.model_validate(company)
        
        # L√≥gica de user_ids centralizada
        company_data.user_ids = [user.id for user in company.users]
        
        return company_data
    
    def transform_to_company_response_list(
        self,
        companies: List[Company]
    ) -> List[CompanyResponse]:
        """
        Transformar lista de empresas em CompanyResponse.
        
        Elimina loop de transforma√ß√£o duplicado nos endpoints.
        
        Args:
            companies: Lista de empresas do banco
            
        Returns:
            List[CompanyResponse]: Lista formatada
        """
        response_data = []
        
        for company in companies:
            company_data = self.transform_to_company_response(company)
            response_data.append(company_data)
        
        return response_data
    
    def get_user_companies_with_filters(
        self,
        db: Session,
        user: User,
        filters: Dict[str, Any]
    ) -> List[Company]:
        """
        Obter empresas do usu√°rio com filtros.
        
        Centraliza l√≥gica de acesso e filtros dos endpoints.
        
        Args:
            db: Sess√£o do banco
            user: Usu√°rio fazendo a consulta
            filters: Dicion√°rio com filtros (name, skip, limit)
            
        Returns:
            List[Company]: Empresas filtradas
        """
        # Extrair par√¢metros
        skip = filters.get('skip', 0)
        limit = filters.get('limit', 100)
        name = filters.get('name')
        
        if user.is_superuser:
            # Superusu√°rio pode ver todas as empresas
            if name:
                return crud_company.search_by_name(db, name=name, skip=skip, limit=limit)
            else:
                return crud_company.get_multi(db, skip=skip, limit=limit)
        else:
            # Usu√°rio normal s√≥ v√™ suas empresas
            companies = crud_company.get_by_user(db, user_id=user.id)
            
            # Aplicar filtro de nome se fornecido
            if name:
                companies = [c for c in companies if name.lower() in c.name.lower()]
            
            # Aplicar pagina√ß√£o manual
            return companies[skip:skip + limit]
    
    def update_company_with_validation(
        self,
        db: Session,
        company_id: UUID,
        update_data: CompanyUpdate,
        user: User
    ) -> Company:
        """
        Atualizar empresa com valida√ß√µes completas.
        
        Centraliza l√≥gica duplicada nos endpoints de update.
        
        Args:
            db: Sess√£o do banco
            company_id: ID da empresa
            update_data: Dados para atualiza√ß√£o
            user: Usu√°rio executando a opera√ß√£o
            
        Returns:
            Company: Empresa atualizada
        """
        # Validar acesso √† empresa
        company = access_control_service.validate_company_access(
            db, user, company_id, "update_company_data"
        )
        
        # Validar regras de neg√≥cio se h√° mudan√ßas relevantes
        if update_data.dict(exclude_unset=True):
            self.validate_company_business_rules(update_data)
        
        # Validar documento √∫nico se est√° sendo alterado
        if update_data.document and update_data.document != company.document:
            if not self.validate_unique_document(
                db, update_data.document, exclude_id=company_id
            ):
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Este documento (CNPJ/CPF) j√° est√° cadastrado"
                )
        
        # Atualizar empresa
        updated_company = crud_company.update(db, db_obj=company, obj_in=update_data)
        
        return updated_company
    
    def can_delete_company(
        self,
        db: Session,
        company_id: UUID
    ) -> Tuple[bool, str]:
        """
        Verificar se empresa pode ser deletada.
        
        Centraliza valida√ß√µes de integridade referencial.
        
        Args:
            db: Sess√£o do banco
            company_id: ID da empresa
            
        Returns:
            Tuple[bool, str]: (pode_deletar, mensagem_erro)
        """
        company = crud_company.get(db, id=company_id)
        
        if not company:
            return False, "Empresa n√£o encontrada"
        
        # Verificar se h√° processos associados
        if company.processes:
            count = len(company.processes)
            return False, f"N√£o √© poss√≠vel deletar empresa com {count} processo(s) associado(s)"
        
        # Verificar se h√° memberships ativos (via novo sistema)
        # TODO: Adicionar verifica√ß√£o via MembershipService quando necess√°rio
        
        # Verificar se h√° alertas relacionados via processos
        # TODO: Adicionar verifica√ß√£o de alertas quando necess√°rio
        
        return True, "Empresa pode ser deletada"
    
    def delete_company_with_validation(
        self,
        db: Session,
        company_id: UUID,
        user: User
    ) -> None:
        """
        Deletar empresa com valida√ß√µes completas.
        
        Centraliza l√≥gica de exclus√£o com verifica√ß√µes de integridade.
        
        Args:
            db: Sess√£o do banco
            company_id: ID da empresa
            user: Usu√°rio executando a opera√ß√£o (deve ser superusu√°rio)
        """
        # Apenas superusu√°rios podem deletar empresas
        access_control_service.validate_superuser(user)
        
        # Verificar se empresa existe
        company = crud_company.get(db, id=company_id)
        if not company:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Empresa n√£o encontrada"
            )
        
        # Verificar se pode deletar
        can_delete, error_message = self.can_delete_company(db, company_id)
        if not can_delete:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=error_message
            )
        
        # Deletar empresa
        crud_company.delete(db, id=company_id)
    
    def get_company_full_stats(
        self,
        db: Session,
        company_id: UUID,
        user: User
    ) -> Dict[str, Any]:
        """
        Obter estat√≠sticas completas da empresa.
        
        Centraliza l√≥gica de dashboard empresarial.
        
        Args:
            db: Sess√£o do banco
            company_id: ID da empresa
            user: Usu√°rio solicitando (deve ter acesso)
            
        Returns:
            Dict[str, Any]: Estat√≠sticas completas
        """
        # Validar acesso
        company = access_control_service.validate_company_access(
            db, user, company_id, "view_reports"
        )
        
        # Estat√≠sticas b√°sicas da empresa
        stats = {
            "company_id": str(company_id),
            "company_name": company.name,
            "company_document": company.document,
            "total_users": len(company.users),
            "total_processes": len(company.processes),
            "user_ids": [str(user.id) for user in company.users],
            "requested_by_user_id": str(user.id),
            "is_superuser_request": user.is_superuser
        }
        
        # Estat√≠sticas detalhadas de processos (se houver)
        if company.processes:
            from app.models.process import ProcessType, ProcessStatus
            
            # Por tipo
            type_stats = {}
            for process_type in ProcessType:
                count = len([p for p in company.processes if p.process_type == process_type])
                type_stats[process_type.value] = count
            
            # Por status
            status_stats = {}
            for process_status in ProcessStatus:
                count = len([p for p in company.processes if p.status == process_status])
                status_stats[process_status.value] = count
            
            stats["processes_by_type"] = type_stats
            stats["processes_by_status"] = status_stats
        
        return stats
    
    def validate_company_business_rules(
        self, 
        company_data: CompanyCreate | CompanyUpdate
    ) -> None:
        """
        Validar regras de neg√≥cio espec√≠ficas de empresas.
        
        Centraliza valida√ß√µes que podem estar espalhadas.
        
        Args:
            company_data: Dados da empresa para validar
            
        Raises:
            HTTPException: Se alguma regra for violada
        """
        # Valida√ß√£o de nome
        if hasattr(company_data, 'name') and company_data.name:
            name = company_data.name.strip()
            
            if len(name) < 2:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Nome da empresa deve ter pelo menos 2 caracteres"
                )
            
            if len(name) > 255:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Nome da empresa deve ter no m√°ximo 255 caracteres"
                )
        
        # Valida√ß√£o de documento (CNPJ/CPF)
        if hasattr(company_data, 'document') and company_data.document:
            document = company_data.document.strip().replace('.', '').replace('/', '').replace('-', '')
            
            if len(document) not in [11, 14]:  # CPF: 11 d√≠gitos, CNPJ: 14 d√≠gitos
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Documento deve ter 11 d√≠gitos (CPF) ou 14 d√≠gitos (CNPJ)"
                )
            
            if not document.isdigit():
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Documento deve conter apenas n√∫meros"
                )
        
        # Valida√ß√£o de email se fornecido
        if hasattr(company_data, 'email') and company_data.email:
            email = company_data.email.strip()
            
            if '@' not in email or '.' not in email:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Email deve ter formato v√°lido"
                )
            
            if len(email) > 255:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Email deve ter no m√°ximo 255 caracteres"
                )
        
        # Valida√ß√£o de telefone se fornecido
        if hasattr(company_data, 'phone') and company_data.phone:
            phone = company_data.phone.strip().replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            
            if len(phone) < 10 or len(phone) > 15:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Telefone deve ter entre 10 e 15 d√≠gitos"
                )
    
    def get_company_with_access_validation(
        self,
        db: Session,
        company_id: UUID,
        user: User,
        required_permission: str = "read_company_data"
    ) -> Company:
        """
        Obter empresa com valida√ß√£o de acesso.
        
        Wrapper conveniente que combina busca + valida√ß√£o.
        
        Args:
            db: Sess√£o do banco
            company_id: ID da empresa
            user: Usu√°rio fazendo a consulta
            required_permission: Permiss√£o necess√°ria
            
        Returns:
            Company: Empresa se acesso v√°lido
            
        Raises:
            HTTPException: Se n√£o encontrada ou sem acesso
        """
        return access_control_service.validate_company_access(
            db, user, company_id, required_permission
        )
    
    def search_companies_by_name(
        self,
        db: Session,
        user: User,
        name: str,
        skip: int = 0,
        limit: int = 100
    ) -> List[Company]:
        """
        Buscar empresas por nome com controle de acesso.
        
        Centraliza l√≥gica de busca respeitando permiss√µes do usu√°rio.
        
        Args:
            db: Sess√£o do banco
            user: Usu√°rio fazendo a busca
            name: Nome para buscar
            skip: Registros para pular
            limit: M√°ximo de registros
            
        Returns:
            List[Company]: Empresas encontradas
        """
        if user.is_superuser:
            return crud_company.search_by_name(db, name=name, skip=skip, limit=limit)
        else:
            # Usu√°rio normal s√≥ busca em suas empresas
            user_companies = crud_company.get_by_user(db, user_id=user.id)
            
            # Filtrar por nome
            filtered = [c for c in user_companies if name.lower() in c.name.lower()]
            
            # Aplicar pagina√ß√£o
            return filtered[skip:skip + limit]


# Inst√¢ncia global para uso nos endpoints
company_service = CompanyService() 