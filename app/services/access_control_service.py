from typing import List, Optional
from uuid import UUID
from fastapi import HTTPException, status
from sqlalchemy.orm import Session

from app.models.user import User
from app.models.company import Company
from app.models.process import Process
from app.models.alert import Alert
from app.crud import company as crud_company, process as crud_process, alert as crud_alert
from app.services.membership_service import membership_service


class AccessControlService:
    """
    Service para centraliazar todas as valida√ß√µes de acesso do sistema.
    
    üéØ Objetivo: Eliminar +50 linhas de c√≥digo duplicado nos endpoints
    e centralizar todas as regras de autoriza√ß√£o em um √∫nico ponto.
    
    Roadmap Fase 3.2 - Etapa 1 (Prioridade M√°xima)
    """
    
    def validate_superuser(self, user: User) -> None:
        """
        Validar se usu√°rio √© superusu√°rio.
        
        Centraliza valida√ß√£o que est√° duplicada em v√°rios endpoints.
        """
        if not user.is_superuser:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acesso negado: apenas administradores t√™m acesso"
            )
    
    def validate_company_access(
        self, 
        db: Session, 
        user: User, 
        company_id: UUID,
        required_permission: str = "read_company_data"
    ) -> Company:
        """
        Validar se usu√°rio tem acesso √† empresa especificada.
        
        Centraliza l√≥gica duplicada em +10 endpoints.
        Usa MembershipService para valida√ß√£o granular de permiss√µes.
        
        Returns:
            Company: A empresa se acesso v√°lido
            
        Raises:
            HTTPException: 404 se empresa n√£o existe, 403 se sem permiss√£o
        """
        # Superusu√°rios t√™m acesso total
        if user.is_superuser:
            company = crud_company.get(db, id=company_id)
            if not company:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="Empresa n√£o encontrada"
                )
            return company
        
        # Verificar se empresa existe
        company = crud_company.get(db, id=company_id)
        if not company:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Empresa n√£o encontrada"
            )
        
        # Usar MembershipService para valida√ß√£o granular
        has_permission = membership_service.check_user_permission(
            db, user.id, company_id, required_permission
        )
        
        if not has_permission:
            # Fallback para sistema legado (user_company_association)
            if user not in company.users:
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail=f"Acesso negado: voc√™ precisa ter permiss√£o '{required_permission}' na empresa"
                )
        
        return company
    
    def validate_process_access(
        self, 
        db: Session, 
        user: User, 
        process_id: UUID,
        required_permission: str = "read_processes"
    ) -> Process:
        """
        Validar se usu√°rio tem acesso ao processo especificado.
        
        Centraliza l√≥gica de valida√ß√£o que est√° duplicada em +8 endpoints.
        
        Returns:
            Process: O processo se acesso v√°lido
            
        Raises:
            HTTPException: 404 se processo n√£o existe, 403 se sem permiss√£o
        """
        # Buscar processo
        process = crud_process.get(db, id=process_id)
        if not process:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Processo n√£o encontrado"
            )
        
        # Superusu√°rios t√™m acesso total
        if user.is_superuser:
            return process
        
        # Validar acesso via empresa do processo
        try:
            self.validate_company_access(db, user, process.company_id, required_permission)
            return process
        except HTTPException as e:
            # Converter erro de empresa para contexto de processo
            if e.status_code == status.HTTP_403_FORBIDDEN:
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail="Acesso negado ao processo"
                )
            raise
    
    def validate_process_in_company(
        self,
        db: Session,
        process_id: UUID,
        company_id: UUID
    ) -> Process:
        """
        Validar que processo pertence √† empresa especificada.
        
        Usado nos endpoints company-oriented para garantir isolamento.
        
        Returns:
            Process: O processo se pertence √† empresa
            
        Raises:
            HTTPException: 404 se n√£o encontrado ou n√£o pertence √† empresa
        """
        process = crud_process.get(db, id=process_id)
        if not process:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Processo n√£o encontrado"
            )
        
        if process.company_id != company_id:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Processo n√£o encontrado nesta empresa"
            )
        
        return process
    
    def validate_alert_access(
        self, 
        db: Session, 
        user: User, 
        alert_id: UUID
    ) -> Alert:
        """
        Validar se usu√°rio tem acesso ao alerta especificado.
        
        Centraliza l√≥gica duplicada nos endpoints de alertas.
        
        Returns:
            Alert: O alerta se acesso v√°lido
            
        Raises:
            HTTPException: 404 se alerta n√£o existe, 403 se sem permiss√£o  
        """
        alert = crud_alert.get(db, id=alert_id)
        if not alert:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Alerta n√£o encontrado"
            )
        
        # Superusu√°rios t√™m acesso total
        if user.is_superuser:
            return alert
        
        # Usu√°rios s√≥ podem acessar seus pr√≥prios alertas
        if alert.user_id != user.id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acesso negado"
            )
        
        return alert
    
    def check_user_company_relationship(
        self, 
        db: Session, 
        user: User, 
        company_id: UUID
    ) -> bool:
        """
        Verificar se usu√°rio tem relacionamento com empresa.
        
        Combina valida√ß√£o via MembershipService + sistema legado.
        
        Returns:
            bool: True se usu√°rio tem acesso √† empresa
        """
        if user.is_superuser:
            return True
        
        # Verificar via MembershipService (sistema novo)
        has_membership = membership_service.check_user_permission(
            db, user.id, company_id, "read_company_data"
        )
        
        if has_membership:
            return True
        
        # Fallback para sistema legado
        company = crud_company.get(db, id=company_id)
        if company and user in company.users:
            return True
        
        return False
    
    def get_user_accessible_companies(
        self, 
        db: Session, 
        user: User
    ) -> List[Company]:
        """
        Obter todas as empresas acess√≠veis ao usu√°rio.
        
        Otimiza consultas que s√£o repetidas nos endpoints.
        
        Returns:
            List[Company]: Lista de empresas com acesso
        """
        if user.is_superuser:
            return crud_company.get_multi(db, skip=0, limit=1000)
        
        # Usar CRUD otimizado
        return crud_company.get_by_user(db, user_id=user.id)
    
    def get_user_accessible_processes(
        self, 
        db: Session, 
        user: User,
        skip: int = 0,
        limit: int = 100
    ) -> List[Process]:
        """
        Obter todos os processos acess√≠veis ao usu√°rio.
        
        Centraliza l√≥gica de filtragem de processos por usu√°rio.
        
        Returns:
            List[Process]: Lista de processos com acesso
        """
        if user.is_superuser:
            return crud_process.get_multi(db, skip=skip, limit=limit)
        
        # Usar CRUD otimizado
        return crud_process.get_by_user_companies(
            db, user_id=user.id, skip=skip, limit=limit
        )
    
    def validate_company_process_creation_access(
        self,
        db: Session,
        user: User,
        company_id: UUID
    ) -> Company:
        """
        Validar acesso para criar processo em empresa espec√≠fica.
        
        Valida tanto acesso √† empresa quanto permiss√£o de cria√ß√£o.
        
        Returns:
            Company: A empresa se usu√°rio pode criar processos
        """
        return self.validate_company_access(
            db, user, company_id, "create_processes"
        )
    
    def validate_company_process_update_access(
        self,
        db: Session,
        user: User,
        company_id: UUID,
        process_id: UUID
    ) -> tuple[Company, Process]:
        """
        Validar acesso para atualizar processo espec√≠fico.
        
        Valida empresa, processo e permiss√£o de atualiza√ß√£o.
        
        Returns:
            tuple[Company, Process]: Empresa e processo se acesso v√°lido
        """
        # Validar acesso √† empresa
        company = self.validate_company_access(
            db, user, company_id, "update_processes"
        )
        
        # Validar que processo pertence √† empresa
        process = self.validate_process_in_company(
            db, process_id, company_id
        )
        
        return company, process
    
    def validate_company_process_delete_access(
        self,
        db: Session,
        user: User,
        company_id: UUID,
        process_id: UUID
    ) -> tuple[Company, Process]:
        """
        Validar acesso para deletar processo espec√≠fico.
        
        Valida empresa, processo e permiss√£o de exclus√£o.
        
        Returns:
            tuple[Company, Process]: Empresa e processo se acesso v√°lido
        """
        # Validar acesso √† empresa  
        company = self.validate_company_access(
            db, user, company_id, "delete_processes"
        )
        
        # Validar que processo pertence √† empresa
        process = self.validate_process_in_company(
            db, process_id, company_id
        )
        
        return company, process


# Inst√¢ncia global para uso nos endpoints
access_control_service = AccessControlService() 